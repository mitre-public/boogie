package org.mitre.tdp.boogie.alg.graph;

import org.mitre.tdp.boogie.alg.resolve.ResolvedRoute;
import org.mitre.tdp.boogie.alg.resolve.ResolvedSection;
import org.mitre.tdp.boogie.utils.Iterators;

public class LegGraphFactory {

  /**
   * Converts the resolved route and all of its contained sections into legs with edges between them and inserts
   * them into an {@link LegGraph}.
   */
  public static LegGraph build(ResolvedRoute route) {
    LegGraph graph = new LegGraph();

    // iterate over the generated by each section of the route skipping sections for which we
    // were unable to match anything in the infrastructure data
    Iterators.fastslow2(route.sections(), s -> !s.allLegs().isEmpty(), (s1, s2, skipped) -> {
      insert(s1, graph);
      insert(s2, graph);

      linkSections(s1, s2, graph);
    });

    return graph;
  }

  /**
   * Generates linking edges between the subsequent resolved sections so there are valid paths between them.
   */
  private static void linkSections(ResolvedSection s1, ResolvedSection s2, LegGraph graph) {

  }

  /**
   * Inserts the converted legs from within the {@link ResolvedSection} into the {@link LegGraph} for reference later.
   */
  private static void insert(ResolvedSection section, LegGraph graph) {

  }
}
