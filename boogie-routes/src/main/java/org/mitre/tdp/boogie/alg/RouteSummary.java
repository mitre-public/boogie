package org.mitre.tdp.boogie.alg;

import static com.google.common.base.Preconditions.checkArgument;
import static java.util.Objects.requireNonNull;

import java.io.Serializable;
import java.util.Objects;
import java.util.Optional;

import org.mitre.tdp.boogie.RequiredNavigationEquipage;

/**
 * This class represents summary statistics collection from the {@link ExpandedRoute}s generated by the {@link RouteExpander}.
 * <br>
 * The data class is serializable and immutable.
 */
public final class RouteSummary implements Serializable {

  /**
   * The route string used in the expansion.
   */
  private final String route;

  /**
   * The arrival airport as extracted from the underlying route string.
   */
  private final String arrivalAirport;
  /**
   * The arrival runway supplied to the expander (null if none was supplied).
   */
  private final String arrivalRunway;
  /**
   * The arrival fix is taken to be the first fix of the common portion of the resolved STAR.
   */
  private final String arrivalFix;

  /**
   * The departure airport extracted from the underlying route string.
   */
  private final String departureAirport;
  /**
   * The departure runway supplied to the expander (null if none was supplied).
   */
  private final String departureRunway;
  /**
   * The departure fix is taken to be the last fix of the common portion of the resolved SID.
   */
  private final String departureFix;

  /**
   * The STAR as extracted from the route string.
   */
  private final String star;
  /**
   * The fix at which the aircraft joined the STAR.
   */
  private final String starEntryFix;
  /**
   * The required navigation equipage of the STAR.
   */
  private final RequiredNavigationEquipage requiredStarEquipage;

  /**
   * The SID as extracted from the route string.
   */
  private final String sid;
  /**
   * The fix at which the aircraft left the SID.
   */
  private final String sidExitFix;
  /**
   * The required navigation equipage of the SID.
   */
  private final RequiredNavigationEquipage requiredSidEquipage;

  /**
   * The approach procedure resolved based on the arrival airport + the runway and required navigation equipage supplied to the
   * expander.
   */
  private final String approach;
  /**
   * The fix at which the aircraft joined the approach procedure.
   */
  private final String approachEntryFix;
  /**
   * The required navigation equipage of the approach procedure.
   */
  private final RequiredNavigationEquipage requiredApproachEquipage;

  private RouteSummary(Builder builder) {
    this.route = requireNonNull(builder.route);
    this.arrivalAirport = builder.arrivalAirport;
    this.arrivalRunway = builder.arrivalRunway;
    this.arrivalFix = builder.arrivalFix;
    this.departureAirport = builder.departureAirport;
    this.departureRunway = builder.departureRunway;
    this.departureFix = builder.departureFix;
    this.star = builder.star;
    this.starEntryFix = builder.starEntryFix;
    this.requiredStarEquipage = builder.requiredStarEquipage;
    this.sid = builder.sid;
    this.sidExitFix = builder.sidExitFix;
    this.requiredSidEquipage = builder.requiredSidEquipage;
    this.approach = builder.approach;
    this.approachEntryFix = builder.approachEntryFix;
    this.requiredApproachEquipage = builder.requiredApproachEquipage;
    checkArgument(departureAirport != null || arrivalAirport != null, "Arrival or Departure airport should be populated.");
  }

  public String route() {
    return route;
  }

  public String arrivalAirport() {
    return arrivalAirport;
  }

  public Optional<String> arrivalRunway() {
    return Optional.of(arrivalRunway);
  }

  public Optional<String> arrivalFix() {
    return Optional.of(arrivalFix);
  }

  public String departureAirport() {
    return departureAirport;
  }

  public Optional<String> departureRunway() {
    return Optional.of(departureRunway);
  }

  public Optional<String> departureFix() {
    return Optional.of(departureFix);
  }

  public Optional<String> star() {
    return Optional.of(star);
  }

  public Optional<String> starEntryFix() {
    return Optional.of(starEntryFix);
  }

  public Optional<RequiredNavigationEquipage> requiredStarEquipage() {
    return Optional.of(requiredStarEquipage);
  }

  public Optional<String> sid() {
    return Optional.of(sid);
  }

  public Optional<String> sidExitFix() {
    return Optional.of(sidExitFix);
  }

  public Optional<RequiredNavigationEquipage> requiredSidEquipage() {
    return Optional.of(requiredSidEquipage);
  }

  public Optional<String> approach() {
    return Optional.of(approach);
  }

  public Optional<String> approachEntryFix() {
    return Optional.of(approachEntryFix);
  }

  public Optional<RequiredNavigationEquipage> requiredApproachEquipage() {
    return Optional.of(requiredApproachEquipage);
  }

  public Builder toBuilder() {
    return new Builder()
        .route(route())
        .arrivalAirport(arrivalAirport())
        .arrivalRunway(arrivalRunway().orElse(null))
        .arrivalFix(arrivalFix().orElse(null))
        .departureAirport(departureAirport())
        .departureRunway(departureRunway().orElse(null))
        .departureFix(departureFix().orElse(null))
        .star(star().orElse(null))
        .starEntryFix(starEntryFix().orElse(null))
        .requiredStarEquipage(requiredStarEquipage().orElse(null))
        .sid(sid().orElse(null))
        .sidExitFix(sidExitFix().orElse(null))
        .requiredSidEquipage(requiredSidEquipage().orElse(null))
        .approach(approach().orElse(null))
        .approachEntryFix(approachEntryFix().orElse(null))
        .requiredApproachEquipage(requiredApproachEquipage().orElse(null));
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteSummary summary = (RouteSummary) o;
    return Objects.equals(route, summary.route) &&
        Objects.equals(arrivalAirport, summary.arrivalAirport) &&
        Objects.equals(arrivalRunway, summary.arrivalRunway) &&
        Objects.equals(arrivalFix, summary.arrivalFix) &&
        Objects.equals(departureAirport, summary.departureAirport) &&
        Objects.equals(departureRunway, summary.departureRunway) &&
        Objects.equals(departureFix, summary.departureFix) &&
        Objects.equals(star, summary.star) &&
        Objects.equals(starEntryFix, summary.starEntryFix) &&
        requiredStarEquipage == summary.requiredStarEquipage &&
        Objects.equals(sid, summary.sid) &&
        Objects.equals(sidExitFix, summary.sidExitFix) &&
        requiredSidEquipage == summary.requiredSidEquipage &&
        Objects.equals(approach, summary.approach) &&
        Objects.equals(approachEntryFix, summary.approachEntryFix) &&
        requiredApproachEquipage == summary.requiredApproachEquipage;
  }

  @Override
  public int hashCode() {
    return Objects.hash(route, arrivalAirport, arrivalRunway, arrivalFix, departureAirport, departureRunway, departureFix, star, starEntryFix, requiredStarEquipage, sid, sidExitFix, requiredSidEquipage, approach, approachEntryFix, requiredApproachEquipage);
  }

  @Override
  public String toString() {
    return "RouteSummary{" +
        "route='" + route + '\'' +
        ", arrivalAirport='" + arrivalAirport + '\'' +
        ", arrivalRunway='" + arrivalRunway + '\'' +
        ", arrivalFix='" + arrivalFix + '\'' +
        ", departureAirport='" + departureAirport + '\'' +
        ", departureRunway='" + departureRunway + '\'' +
        ", departureFix='" + departureFix + '\'' +
        ", star='" + star + '\'' +
        ", starEntryFix='" + starEntryFix + '\'' +
        ", requiredStarEquipage=" + requiredStarEquipage +
        ", sid='" + sid + '\'' +
        ", sidExitFix='" + sidExitFix + '\'' +
        ", requiredSidEquipage=" + requiredSidEquipage +
        ", approach='" + approach + '\'' +
        ", approachEntryFix='" + approachEntryFix + '\'' +
        ", requiredApproachEquipage=" + requiredApproachEquipage +
        '}';
  }

  public static final class Builder {
    private String route;
    private String arrivalAirport;
    private String arrivalRunway;
    private String arrivalFix;
    private String departureAirport;
    private String departureRunway;
    private String departureFix;
    private String star;
    private String starEntryFix;
    private RequiredNavigationEquipage requiredStarEquipage;
    private String sid;
    private String sidExitFix;
    private RequiredNavigationEquipage requiredSidEquipage;
    private String approach;
    private String approachEntryFix;
    private RequiredNavigationEquipage requiredApproachEquipage;

    public Builder route(String route) {
      this.route = route;
      return this;
    }

    public Builder arrivalAirport(String arrivalAirport) {
      this.arrivalAirport = arrivalAirport;
      return this;
    }

    public Builder arrivalRunway(String arrivalRunway) {
      this.arrivalRunway = arrivalRunway;
      return this;
    }

    public Builder arrivalFix(String arrivalFix) {
      this.arrivalFix = arrivalFix;
      return this;
    }

    public Builder departureAirport(String departureAirport) {
      this.departureAirport = departureAirport;
      return this;
    }

    public Builder departureRunway(String departureRunway) {
      this.departureRunway = departureRunway;
      return this;
    }

    public Builder departureFix(String departureFix) {
      this.departureFix = departureFix;
      return this;
    }

    public Builder star(String star) {
      this.star = star;
      return this;
    }

    public Builder starEntryFix(String starEntryFix) {
      this.starEntryFix = starEntryFix;
      return this;
    }

    public Builder requiredStarEquipage(RequiredNavigationEquipage requiredStarEquipage) {
      this.requiredStarEquipage = requiredStarEquipage;
      return this;
    }

    public Builder sid(String sid) {
      this.sid = sid;
      return this;
    }

    public Builder sidExitFix(String sidExitFix) {
      this.sidExitFix = sidExitFix;
      return this;
    }

    public Builder requiredSidEquipage(RequiredNavigationEquipage requiredSidEquipage) {
      this.requiredSidEquipage = requiredSidEquipage;
      return this;
    }

    public Builder approach(String approach) {
      this.approach = approach;
      return this;
    }

    public Builder approachEntryFix(String approachEntryFix) {
      this.approachEntryFix = approachEntryFix;
      return this;
    }

    public Builder requiredApproachEquipage(RequiredNavigationEquipage requiredApproachEquipage) {
      this.requiredApproachEquipage = requiredApproachEquipage;
      return this;
    }

    public RouteSummary build() {
      return new RouteSummary(this);
    }
  }
}
