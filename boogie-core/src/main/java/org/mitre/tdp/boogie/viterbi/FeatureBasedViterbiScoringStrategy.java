package org.mitre.tdp.boogie.viterbi;

/**
 * An extension of a {@link ViterbiScoringStrategy} wherein the {(stage, state) -> likelihood} computation can be naturally
 * split into two parts:
 *
 * 1) A feature derivation portion - in which features are computed from the stage/state combination
 * 2) A feature combination/normalization portion - in which the features are normalized and combined to form a likelihood
 *
 * Making some assumptions about the structure of the scoring allows us to layer on some additional logic for computing fields
 * of features which can be used as training data for models external to java ({@link ViterbiStateScoreTrainingDataGenerator}).
 */
public interface FeatureBasedViterbiScoringStrategy<Stage, State> extends ViterbiScoringStrategy<Stage, State> {

  /**
   * Returns the appropriate {@link ViterbiFeatureVectorExtractor} for the provided stage/state combination - note that this
   * extractor may be static across all combinations - we merely provided the stage/state for the case where there are multiple
   * different feature/model combinations
   */
  ViterbiFeatureVectorExtractor<Stage, State> featureExtractor(Stage stage, State state);

  /**
   * Returns the appropriate {@link ViterbiFeatureVectorScorer} for the given stage/state combination - this scorer can expect
   * to get handed a {@link ViterbiFeatureVector} as generated by the appropriate {@link #featureExtractor(Object, Object)}.
   */
  ViterbiFeatureVectorScorer featureVectorScorer(Stage stage, State state);

  /**
   * Returns the likelihood given the provided stage, that the state is the correct association.
   */
  @Override
  default Double scoreStateGivenStage(Stage stage, State state) {
    ViterbiFeatureVector featureVector = featureExtractor(stage, state).apply(stage, state);
    return featureVectorScorer(stage, state).apply(featureVector);
  }
}
